#+property: header-args:js :tangle ../public/javascripts/modules/scraper.mjs
#+title: Modular Scraper for Ithkuil.net
* Scraper components
I'm rewriting the whole shebang in a more functional (and therfore, I
hope, more reproducible) style. We'll see how it goes.

** General utilities
Small and widely useful snippets go here.

*** Scraping text

#+BEGIN_SRC js
  // get a node's text or the empty string
  const getText = el => el.textContent || "";
  // wrap the text and the node itself in an object
  const textAndElement = el => ({text: getText(el),
                                 node: el});
#+END_SRC

#+BEGIN_SRC js
  // get the following sibling
  const nextSibling = el => el.nextSibling || false;
  // get the following element sibling
  const nextElementSibling = el => el.nextElementSibling || false;
  // get the text of the next element sibling
  const nextSiblingText = el => nextSibling(el) ? getText(nextSibling(el)) : false;
  // get the text of the next element sibling
  const nextElementSiblingText = el => nextElementSibling(el) ?
        getText(nextElementSibling(el)) : false;
#+END_SRC

#+BEGIN_SRC js
  // get all following text nodes until the next element
  function slurpTextNodes (start) {
      let slurpedText = "", next = nextSibling(start);
      while (next.nodeType ? next.nodeType == Node.TEXT_NODE : false) {
          slurpedText += next.textContent;
          next = nextSibling(next)
      }
      return slurpedText;
  }
#+END_SRC

**** TODO tree cutting function

** Scraping root tables

*** Root table utilities
#+BEGIN_SRC js
// Root tables have a <strong> element in the first row
const getTableRoot = tbl => tbl.querySelector("tr").querySelector("strong");
// Get root text
const getTableRootText = tbl => getText(getTableRoot(tbl));
// Gloss strings should immediately follow the root as a text node
const getTableGlossText = tbl => getText(getTableRoot(tbl).nextSibling);
// Collect all root tables from page
const getAllRootTables = doc => Array.from(doc.querySelectorAll("table"))
      .filter(getTableRoot);
#+END_SRC

*** Destructuring a table
#+BEGIN_SRC js

const tableToArray = tbl => Array.from(tbl.querySelectorAll("tr")) // table => array of rows...
      .map( tr => Array.from(tr.querySelectorAll("td"))	// row => array of cells
	    .map(textAndElement));				// cell => {text, element}
#+END_SRC

** Scraping derived roots
#+BEGIN_SRC js
  // regexp describing a root
  const looseRootRegExp = /-? ?([^0-9: ]{1,6}) ?-?/;
  // requires both hyphens to be present
  const strictRootRegExp = /- ?([^0-9: ]{1,6}) ?-/;
  // derived roots aren't children of a table
  const derivedRootFilter = el => ! el.closest("table");
  // all derived root labels
  const getAllDerivedRoots = doc => Array.from(doc.querySelectorAll("strong"))
        .filter(derivedRootFilter);
  const isolateDerivedRoot = el => looseRootRegExp.test(getText(el)) ?
        getText(el).match(looseRootRegExp)[1] : false;
  // extract & parse derived roots
  const extractDerivedRoot = el => ({root: isolateDerivedRoot(el),
                                     gloss: slurpTextNodes(el)});

#+END_SRC

** Behold, the scraper!
#+BEGIN_SRC js
  class LexiconScraper {
      constructor (page) {
          this.allRootTables = LexiconScraper.rootTables(page);
          this.allDerivedRoots = LexiconScraper.derivedRoots(page);
      }
      static rootTables (page) {
          return getAllRootTables(page)
              .map(tbl => ({root: getTableRootText(tbl),
                            gloss: getTableGlossText(tbl),
                            node: tbl}));
      }
      static derivedRoots (page) {
          return getAllDerivedRoots(page).map(extractDerivedRoot);
      }
  }
  // inject 
  window.Lexicon = new LexiconScraper(document);


#+END_SRC
