#+property: header-args:js :tangle ../public/javascripts/modules/scraper.mjs
#+title: Modular Scraper for Ithkuil.net
* Scraper components
I'm rewriting the whole shebang in a more functional (and therfore, I
hope, more reproducible) style. We'll see how it goes.

** General utilities
Small and widely useful snippets go here.

*** Scraping text

#+BEGIN_SRC js
// get a node's text or the empty string
const getText = el => el.textContent || "";
// wrap the text and the node itself in an object
const textAndElement = el => ({text: getText(el),
			       node: el});
#+END_SRC

** Scraping root tables

*** Root table utilities
#+BEGIN_SRC js
// Root tables have a <strong> element in the first row
const getTableRoot = tbl => tbl.querySelector("tr").querySelector("strong");
// Get root text
const getTableRootText = tbl => getText(getTableRoot(tbl));
// Gloss strings should immediately follow the root as a text node
const getTableGlossText = tbl => getText(getTableRoot(tbl).nextSibling);
// Collect all root tables from page
const getAllRootTables = doc => Array.from(doc.querySelectorAll("table"))
      .filter(getTableRoot);
#+END_SRC

*** Destructuring a table
#+BEGIN_SRC js

const tableToArray = tbl => Array.from(tbl.querySelectorAll("tr")) // table => array of rows...
      .map( tr => Array.from(tr.querySelectorAll("td"))	// row => array of cells
	    .map(textAndElement));				// cell => {text, element}
#+END_SRC

** Scraping derived roots
#+BEGIN_SRC js
const rootRegExp = /-? ?([^0-9: ]{1,6}) ?-?/;

Array.from(document.querySelectorAll("strong"))
    .filter(strong => /^-? ?[^0-9 :]{1,6} ?-?$/.test(strong.textContent) &&
	    strong.nextSibling &&
	    strong.nextElementSibling)
    .map(strong => ({root: strong.textContent,
		     gloss: strong.nextSibling.textContent,
		     major: strong.nextElementSibling.textContent}));
#+END_SRC

** Behold, the scraper!
#+BEGIN_SRC js
class LexiconScraper {
    constructor (page) {
	this.page = page;
	this.allRootTables = 
    }
    get rootTables () {
	return getAllRootTables(page)
	    .map(tbl => ({root: getTableRootText(tbl),
			  gloss: getTableGlossText(tbl),
			  node: tbl}));
    }
    get derivedRoots () {
	
    }
}

window.Lexicon = new LexiconScraper(document);
	
#+END_SRC
