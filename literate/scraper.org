#+property: header-args :tangle scripts/scraper.js
#+title: Scraper for Ithkuil Website

* Notes
The Ithkuil language and its [[http://ithkuil.net][website]] are the creations of John Quijada. 

** To conveniently run this script
Here is a snippet of code to be copy.
#+begin_src javascript :tangle no
  // prepare the page & inject scraper
  function setup() {
      // add a script to a page
      function appendScript(src) {
          var script = document.createElement("script");
          script.src = src;
          document.body.appendChild(script);
          return script;
      }
      // my program assumes we're working with utf-8
      function adjustCharset(charset) {
          var meta = document.querySelector("meta");
          meta.setAttribute("content", "text/html");
          meta.setAttribute("charset", charset);
          return meta;
      }
      adjustCharset("utf-8");
      appendScript("/home/prime/Projects/ithkuil/" +
                   "scripts/scraper.js");
  }

  setup();

#+END_SRC
* Derived roots
** General Utilities
Tools for extracting lexicon data from ithkuil.net
*** Does a string contain a newline?             :utility:string:predicate:
Returns =true= if string includes more than one line, =false= otherwise.
#+begin_src javascript
function containsNewline(str) {
    if (str.search(/$/m) == -1){
	return false;
    }else{
	return true;
    };
};
#+end_src
*** Does a string have non-whitespace content    :utility:string:predicate:
Returns true if a string contains a non-whitespace character. See the table below for details.
| test   | result |
|--------+--------|
| ""     | =false=  |
| " \n " | =false=  |
| " \nn" | =true=   |
| "\n"   | =false=  |
| " "    | =false=  |
| "eqal" | =true=   |
#+begin_src javascript
  function notJustSpace(str) {
      if (str.search(/\S/) == -1){
          return false;
      }else{
          return true;
      };
  };
#+end_src
*** retrieve a node's text 

#+begin_src javascript
// get a node's text
function text(node) {
    return node.textContent;
};
#+end_src
** extracting elements representing roots

*** Build Index of Derived Roots
Now we must build the derived roots object. This occurs in the =DerivedRoots= object, using several passes.
**** is it a derived root               :utility:string:ithkuil:predicate:
Quick n dirty test to see if an element is a derived root: returns true if a given string contains =pattern of stems= or =patterned after=. I think there is at least one case in the lexicon file where it makes a positive error, snatching some other bit of text that contains one of those strings, but is not a derived root.
#+begin_src javascript
  function isDerivedRoot(text) {
      if (text.search(/pattern of stems|patterned/i) === -1) {
          return false;
      } else {
          return true;
      };
  }

#+END_SRC
**** find all derived roots
Finds all paragraph elements in a document, makes an array containing their texts, and filters them with =isDerivedRoot=.
#+begin_src javascript
  function allDerivedRoots() {
      var allP = [].slice.call(
          document.querySelectorAll('p'));
      var filtered = allP.filter(function(node) {
          return isDerivedRoot(text(node));
      });
      var ret = filtered.map(text);
      // filtered.forEach(function(node) {
      //     document.body.removeChild(node);
      // });
      return ret;
  };
#+end_src
**** check combined entry
Some of the "paragraph" elements in the lexicon contain more than one definition, with a paragraph break simulated by a couple line breaks. this function splits those up, and also cleans up empty lines & whitespace.
#+begin_src javascript
  function checkCombinedEntry(pText) {
      // if it contains a newline...
      if (containsNewline(pText)){
          // split it, eliminating strings consisting only of whitepace
          var potentials = pText.split(/$/m).filter(notJustSpace);
          // returns an array if there is more than one interesting string 
          if (potentials.length > 1) {
              return potentials;
          } else {
              // otherwise returns the only member of the array
              return potentials[0];
          };
      } else {
          // if it doesn't contain a newline, the string is good as is
          return pText;
      };
  };
#+end_src
**** Make lex entry
Takes the text of a lexicon entry, an array of a =majorRoot= and =derivedRoot=, and an index to store them in. Checks to see if the index already has an entry for the =majorRoot=, 
#+begin_src javascript
  function makeLexEntry(lx, matches, index) {
      var majorRoot = matches[1].slice(1,-1);
      var derivedRoot = matches[0].slice(1,-1);
      // if there is already an entry for this majorRoot...
      if (index.hasOwnProperty(majorRoot)) {
          // put the derivedRoot in the appropriate place
          index[majorRoot].push(lx);
      } else {
          // otherwise make a new entry
          index[majorRoot] = Array.of(lx);
      };
  };
#+end_src

**** sort root
Searches for the string JQ uses as notation for lexicon entries. If the string is  not found, send the entry to the provided orphan bucket. If the string occurs exactly twice, file the entry in the index with =makeLexEntry=. If there are still more matches, send it to orphans.
#+begin_src javascript

  function sortRoot(lexText, index, orphans) {
      var matches = lexText.match(/-\S{1,6}-/g);
      if (matches == null){
          orphans.push(lexText);
      } else if (matches.length == 2) {
          makeLexEntry(lexText, matches, index);
          return;
      } else {
          orphans.push(lexText);
      };
  };
#+end_src

**** make an index of derived roots

#+begin_src javascript
  // create a dictionary of Ithkuil roots
  function derivedRoots() {
      // dictionary of major roots and their minor root followers
      var index = {};
      // a bucket for ill-formed strings that need human sorting 
      var orphans = [];
      // collect all derived roots
      var d = allDerivedRoots()
      // split combined entries
          .map(checkCombinedEntry)
      // flatten nested arrays
          .reduce(
              function(acc,val) {
                  if (Array.isArray(val)) {
                      acc = acc.concat(val);
                  } else {
                      acc.push(val);
                  }
                  return acc;
              }, []);
      // sort through the collection of roots
      // into the index and orphan containers
      d.forEach(function(lx) {
          sortRoot(lx, index, orphans);
      });
      return {"index": index,
              "orphans": orphans}
  };
#+end_src
* Index of Tabled roots
** Notes on Table structure
There are a number of difficulties involved in parsing the tabled roots.
 - the tables aren't semantic--there are no =<th>= elements to separate headings from data 
 - formatted for print publication: very attractive, but complicates extraction
 - not all tables share a frmat.

The lexicon's =<tbody>= elements can include 7 or 9 table rows, totalling between 10 and 23 cells. the number 23 comprises the full array of two Designations with three Patterns each, each of those having three Stems (a total of 18 significant cells). Additionally, there are the following cells, present in all tables:
 - the root consonant cluster and its gloss,
 - "informal stems"
 - "formal stems"
 - "complementary stems" (one or two instances)
Of these, we are only interested in the first. Generally speaking, the other four data aren't helpful even for parsing.
** Test for root table                      :utility:predicate:html:ithkuil:
Another hack similar to the derived root test. it expects to be given a table node. it will search through the cells of the table for strings containing JQ's notation for a root, essentially /a string of non whitespace characters surrounted by a =-= character/.
#+BEGIN_QUOTE
"-LN-   ‘front [relative to directional orientation or primary interface]’ The pattern of stems for this root follow those of the root -G-."
"-VKR-    ‘ZEBRA’ (the stems of this root are patterned after the root -SK-)". it returns true if such a string is found 
#+END_QUOTE

#+begin_src javascript
  function isRootTable(tableNode) {
      if (tableNode.querySelector('tr').textContent.search(/^\s*-?\s*\S+?\s*-/) === -1) {
          return false;
      } else {
          return true;
      };
  };
#+END_SRC
** Find all root tables
Select all tables in the document and filter out those that aren't tables.
#+begin_src javascript
  function allTableRoots() {
      // get all <TABLE>
      var allTables = [].slice.call(document.querySelectorAll('table'));
      // quick and dirty test to see if it's a root table

      return allTables.filter(isRootTable);
    
  };
#+end_src

** Turn a table into an array of rows
This function takes a table or tbody node, and outputs an array containing one member for every row. Each row is itself an array consisting of the =textContent= of its cells.
#+begin_src javascript
  function tableToRowArray(tbl) {
      var rows = [].slice.call(tbl.querySelectorAll('tr'));
      var result = [];
      rows.forEach(
          function (row){
              var cells = [].slice.call(row.querySelectorAll('td'));
              result.push(cells.map(
                  function(node){
                      return node.textContent;
                  }));		
          });
      // document.body.removeChild(tbl);
      return result;    
  }
#+END_SRC
** Root and gloss
For all types of tables, the first cell (i.e. =tblArray[0][0]=) contains a dash-delimited root consonant cluster, followed by a gloss phrase.
#+BEGIN_SRC  javascript
  function handleRootAndGloss(str) {
      var rootPattern = /-?\s*(\S+?)\s*-\s*(.*)/;
      var matches = str.match(rootPattern);
      var root = matches[1].replace(/-/g, "");
      var gloss = cleanGloss(matches[2]);
      return {"root": root,
              "gloss": gloss
             };
    
  };

#+END_SRC
** clean gloss
#+begin_src javascript
  function cleanGloss(gloss) {
      var clean = gloss.replace(/^\W*|\W*$/g, "") // remove quotes
          .replace(/\s\s+/g, " ")			// remove extraneous space
          .toLowerCase();				// lowercase it
      return clean;
  }




#+END_SRC
** Tabled root
*** test for header content                     :predicate:utility:ithkuil:
**** is a cell a table header?
#+begin_src javascript
  function isTableHeader(str){
      var searchPattern = /^(\s*(((in)?formal)|(complementary))\s*(stems?)?)?\s*$/i;
      return searchPattern.test(str);
  }
#+end_src
**** is a whole row a table header
#+begin_src javascript 
  function isRowTableHeader(ary) {
      if (ary.map(isTableHeader)
          .includes(false)){
          return false;
      } else {
          return true;
      }
  }
#+END_SRC
*** Major Root Entry                                       :ithkuil:record:
**** walk a table                                                :utility:
#+begin_src javascript
  // a utility for going over a table
  function walkTable(tbl, callback) {
      for (var row = 0; row < tbl.length; row++) {
          for (var col = 0; col < tbl[row].length; col++) {
              // it passes the callback the table,
              // the cell under consideration
              // the row and column number where the cell was found
              callback(tbl, row, col);
          };
      };
  };
#+end_src
**** Major root
A majorRootEntry consists of a gloss, a root, a table of stems, and a list of minor roots having the same pattern.
#+begin_src javascript
  // IthkuilRoot.prototype.derivedRootsIndex = derivedRoots().index;
  // 
  const DERIVED_ROOTS = derivedRoots().index;

  function makeIthkuilRoot(rowArray) {
      // strip first row from rowArray, parse root & gloss 
      var firstRowContents = rowArray.shift().shift();
      var header = handleRootAndGloss(firstRowContents);
      var root = header.root;
      var gloss = header.gloss;
      // produce a table with header cells removed
      var strippedTable = rowArray.filter(
          // filter rows by what is NOT a table header
          function(row){
              return ! isRowTableHeader(row);
          });
      var table = parseStemTable(strippedTable);
      // search the index for minor roots
      var derived = DERIVED_ROOTS[root];
      return new IthkuilRoot({
          "gloss": gloss,
          "root": root,
          "table": table,
          "derived": derived,
      })
  }


  function IthkuilRoot(obj) {
      //
      this.gloss = obj.gloss;
      this.root = obj.root;
      this.table = obj.table;
      this.derived = obj.derived;

      return this;
  };

  Object.defineProperty(IthkuilRoot.prototype, "stems", {
      get: function() {
          return this.table.reduce(
              function(a,b){
                  return a.concat(b);
              }).reduce(
                  function(a,b){
                      return a.concat(b);});
      }
  })
#+END_SRC
**** Stem-tables
This object does most of the table-butchery we need.
#+begin_src javascript
  function parseStemTable(table) {
      // make an empty stem table
      function create() {
          var stems = [];
          for (var dsn = 0; dsn < 2; dsn++) {
              var designation = [];
              for (pattern = 0; pattern < 3; pattern++) {
                  designation.push(new Array(3));
              };
              stems.push(designation);
          };
          return stems;
      }
      function removeNumbers(str) {
          return str.replace(/^\s*\d+\.?\s*/, "");
      }
      // sort complementary patterns
      function handleComplementaryPatterns(tbl) {
          walkTable(tbl,
                    function(t, row, col) {
                        // informal stems on the left, formal on right
                        var designation = col < 2 ? 0 : 1;
                        // every other col is pattern 1 or pattern 2
                        var pattern = col % 2 + 1;
                        // row is stem
                        var stem = row;
                        var gloss = removeNumbers(t[row][col]);
                        stemTable.set(gloss, designation, pattern, stem)
                    });
      };
      // sort holistic patterns
      function handleHolisticPattern(tbl) {
          var reference;
          walkTable(tbl,
                    function(t, row, col) {
                        var gloss = removeNumbers(t[row][col]);
                        stemTable.set(gloss, col, 0, row);
                        if (row == 0 && col == 1) {
                            // store reference if on row 0 col 1
                            // (i.e. Formal Designation, Pattern 1, Row 1)
                            reference = gloss;
                        } else if (t[row].length < 2) {
                            // if any subsequent row has fewer than two cells
                            // fill them in from the reference string
                            stemTable.set(reference, 1, 0, row);
                        };
                    });
      };
      // setter for the stemtable...
      // 1. takes the gloss found in the table
      // 2. an integer representing informal (0) or formal (1)
      // 3. an integer representing the pattern, 0-2
      // 4. an integer representing the stem number, 0-2
      var stemTable = {
          "stems": create(),
          "set": function(stemGloss, designation, pattern, stem) {
              this.stems[designation][pattern][stem] = stemGloss;
              return this;
          }
      }

      var holistic = table.slice(0,3);
      var complementary = table.slice(3);
      handleHolisticPattern(holistic);
      handleComplementaryPatterns(complementary);

      return stemTable.stems;
  }
  // makes an empty StemTable
#+END_SRC
#+BEGIN_SRC javascript :tangle no
  StemTable.prototype.flat = function () {
      return this.stems.reduce(
          function(a,b){
              return a.concat(b);
          }).reduce(
              function(a,b){
                  return a.concat(b);});
  };
#+END_SRC
** Build a lexicon of table roots
the idea is this: given a =tableNode= known to be a root table, examine its structure (number of =<tr>= and =<td>= elements. determine if it has all 18 stems...
#+begin_src javascript
  var Ithkuil = {
      DICTIONARY: {
          entries: allTableRoots().map(tableToRowArray)
              .map(makeIthkuilRoot),
          search: function(field, searchTerm){
              // function to test a string based on the given regexp
              function testString(str) {
                  var term = new RegExp(searchTerm, "i");
                  return term.test(str);
              };
              // 
              function searchTest(entry) {
                  // if the field is an array, test to see if any elements contain term
                  var fieldData = entry[field];
                  if (fieldData instanceof Array) {
                      return fieldData.some(testString);
                  } else {
                      return testString(fieldData);
                  };
              };
              // 
              return this.entries.filter(searchTest);
          }
      }
  }
#+END_SRC

